Private / optional component libraries.

Currently unused – the core code lives in `src/` (UI modules + features) and shared headers in `include/`.
Add a library here only when a feature becomes large enough to justify its own boundary or you want to optionally compile / exclude it.

When to create a lib module:
1. Feature grows beyond a couple of small files (≈ >300 lines) and has internal helpers not needed elsewhere.
2. You want clearer ownership / encapsulation (e.g., future persistence layer, analytics, settings manager).
3. You need different build flags (`library.json`) for just that component.

Recommended structure:
lib/
  settings_store/
    src/
      settings_store.cpp
      settings_store_internal.cpp
    include/ (only if external headers needed)
      settings_store.h
    library.json (if custom flags / defines required)

Guidelines:
* Keep public API minimal – expose one primary header named after the library.
* Avoid Arduino or display includes in public headers unless absolutely required; push hardware specifics into `.cpp`.
* Use `library.json` only when you need custom compile flags; keep global config in `platformio.ini` otherwise.
* Provide a tiny usage comment at the top of the public header.
* If logic can be host‑tested, isolate pure functions so they can be moved (or mirrored) near `logic_core` patterns.

Testing a new lib:
* For pure logic: add a host test file (`test/test_<name>_native.cpp`) and include the header.
* For hardware interactions: add or extend an on‑device Unity test.

Naming conventions:
* Directory: lowercase_with_underscores
* Public header: same as directory (`settings_store.h`)
* Internal headers (if any): suffix `_internal.h` and keep inside the lib directory (not `include/`).

If this folder stays empty, that's fine—it means current modularization in `src/` is still sufficient.
